openapi: 3.0.0
info:
  title: Arrigoo CDP API
  version: 1.0.0
servers:
  - url: http://localhost:3030/v1
    description: Development server
  - url: https://test.arrigoo.io/v1
    description: Test server
paths:
  /property:
    get:
      summary: Get all property specifications
      responses:
        '200':
          description: Successful response
          body:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
    post:
      summary: Create a new property
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '200':
          description: User created successfully
  /property/{label}:
    get:
      summary: Get a property by label
      parameters:
        - name: label
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: Property not found

  /property/{id}:  
    put:
      summary: Update a property by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '200':
          description: Property updated successfully
        '404':
          description: Property not found
  
    delete:
      summary: Delete a property by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Property deleted successfully

  /event-api:
    get:
      summary: Get all events
      responses:
        '200':
          description: Successful response
  /segment:
    get:
      summary: Get all segment specifications.
      responses:
        '200':
          description: Successful response
  /user:
    get:
      summary: Get all users (admin access - not end users)
      responses:
        '200':
          description: Successful response
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
  /user/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
        '404':
          description: User not found
    put:
      summary: Update a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
  /security/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful response
        '401':
          description: Unauthorized
  /account:
    get:
      summary: Get all accounts
      responses:
        '200':
          description: Successful response
    post:
      summary: Create a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Account created successfully
  /stat:
    get:
      summary: Get statistics
      responses:
        '200':
          description: Successful response
  /customer:
    get:
      summary: Get all customers
      responses:
        '200':
          description: Successful response
    put:
      summary: Update or create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdateRequest'
      responses:
        '201':
          description: Customer updated/created successfully
  /customer/segment/{id}:
    get:
      summary: Get customers by segment ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
  /customer/{id}:
    get:
      summary: Get a single customer by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: Customer not found
  /action:
    get:
      summary: Get all actions
      responses:
        '200':
          description: Successful response
    post:
      summary: Create a new action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Action created successfully
  /actiontrigger:
    get:
      summary: Get all action triggers
      responses:
        '200':
          description: Successful response
    post:
      summary: Create a new action trigger
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Action trigger created successfully
  /secret:
    get:
      summary: Get all secrets
      responses:
        '200':
          description: Successful response
    post:
      summary: Create a new secret
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Secret created successfully
  
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: User ID
        email:
          type: string
          description: User email
        full_name:
          type: string
          description: User full name
        phone:
          type: string
          description: User phone number
        role:
          type: string
          description: User role
        ctime:
          type: string
          format: date-time
          description: User creation time
        utime:
          type: string
          format: date-time
          description: User update time
        latest_access:
          type: string
          format: date-time
          description: User latest access time
    SegmentCondition:
      type: object
      properties:
        pt:
          type: integer
          description: Property type
        field:
          type: string
          description: Field name
        op:
          type: string
          description: Operator
        v1:
          type: string
          description: First value
        v2:
          type: string
          description: Second value
      required:
        - pt
        - field
        - op
        - v1
        - v2

    Segment:
      type: object
      properties:
        id:
          type: integer
          description: Segment ID
        properties:
          type: array
          items:
            type: integer
          description: List of property types
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/SegmentCondition'
          description: List of segment conditions
        title:
          type: string
          description: Segment title
        sys_title:
          type: string
          description: System title
        description:
          type: string
          description: Segment description
      required:
        - id
        - properties
        - conditions
        - title
        - sys_title
        - description
    CustomerUpdateRequest:
      type: object
      properties:
        cid:
          type: string
          description: Customer ID
        ident:
          type: array
          items:
            $ref: '#/components/schemas/IdentifierValue'
          description: List of identifier values
        properties:
          type: object
          additionalProperties:
            type: object
          description: Customer property values keyed by system name of the property.
      required:
        - cid
        - ident
        - properties

    IdentifierValue:
      type: object
      properties:
        type:
          type: string
          description: Identifier type
        value:
          type: string
          description: Identifier value
      required:
        - type
        - value